(function(n,i){typeof exports=="object"&&typeof module<"u"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(n=typeof globalThis<"u"?globalThis:n||self,i(n.HookManager={}))})(this,function(n){"use strict";class i{constructor(t,e){this.obj=t,this.key=e,this._callHandlers=[],this._returnHandlers=[],this._errorHandlers=[],this._origFn=t[e],this._hook()}_hook(){const t=this;this.obj[this.key]=function(...e){t._callHandlers.forEach(r=>r.call(this,e));let o;try{o=t._origFn.apply(this,e)}catch(r){throw t._errorHandlers.forEach(s=>s.call(this,r)),r}return o&&typeof o.then=="function"?o.then(r=>(t._returnHandlers.forEach(s=>s.call(this,r)),r),r=>(t._errorHandlers.forEach(s=>s.call(this,r)),Promise.reject(r))):(t._returnHandlers.forEach(r=>r.call(this,o)),o)}}onCall(t){return this._callHandlers.push(t),this}onReturn(t){return this._returnHandlers.push(t),this}onError(t){return this._errorHandlers.push(t),this}unhook(){this.obj[this.key]=this._origFn}}class l{constructor(t,e){this.obj=t,this.key=e,this._getHandlers=[],this._setHandlers=[],this._origDescriptor=Object.getOwnPropertyDescriptor(t,e),this._value=t[e],this._hook()}_hook(){const t=this;Object.defineProperty(this.obj,this.key,{configurable:!0,enumerable:!0,get(){return t._getHandlers.forEach(e=>e.call(this,t._value)),t._value},set(e){t._setHandlers.forEach(o=>o.call(this,e)),t._value=e}})}onGet(t){return this._getHandlers.push(t),this}onSet(t){return this._setHandlers.push(t),this}unhook(){this._origDescriptor&&Object.defineProperty(this.obj,this.key,this._origDescriptor)}}function u(h,t){const e=t.split(".");let o=h;for(let s=0;s<e.length-1;s++){if(!o)return null;o=o[e[s]]}const r=e[e.length-1];return o?{obj:o,key:r}:null}class a{constructor(t=typeof window<"u"?window:globalThis){this.root=t,this.hooks=new Map}hook(t){const e=u(this.root,t);if(!e)throw new Error(`Invalid path: ${t}`);const{obj:o,key:r}=e,s=Object.getOwnPropertyDescriptor(o,r),c=typeof o[r]=="function"&&!(s&&(s.get||s.set))?new i(o,r):new l(o,r);return this.hooks.set(t,c),c}unhook(t){const e=this.hooks.get(t);e&&(e.unhook(),this.hooks.delete(t))}unhookAll(){for(const t of this.hooks.values())t.unhook();this.hooks.clear()}}n.FunctionHook=i,n.HookManager=a,n.PropertyHook=l,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
